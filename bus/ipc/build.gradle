/*
 * ************************************************************
 * 文件：build.gradle  模块：ipc  项目：ElegantBus
 * 当前修改时间：2020年06月17日 02:23:52
 * 上次修改时间：2020年06月17日 01:04:47
 * 作者：Cody.yi   https://github.com/codyer
 *
 * 描述：ipc
 * Copyright (c) 2020
 * ************************************************************
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }

    defaultPublishConfig "aidlRelease"
    flavorDimensions('ipc')

    productFlavors {
        // 使用 aidl 实现
        aidl {
            dimension 'ipc'
        }
        // 使用 Messenger 实现
        messenger {
            dimension 'ipc'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api project(':bus:core')
    implementation rootProject.ext.dependencies["fastjson"]
}

if (!isNoDoc) {//本地仓库不需要注释
    // 改变版本的时候先关闭文档输出编译成功，然后再打开编译文档输出，不然会依赖出错
    apply from: "${project.rootDir}/config-doc.gradle"
}

if (isLocalMaven) {
    apply from: "${project.rootDir}/config-local-aar-maven.gradle"
} else {
    apply plugin: 'com.github.dcendents.android-maven'
    group = 'com.github.codyer'
    // 支持多变体打包
    if (android.productFlavors.size() > 0) {
        android.libraryVariants.all { variant ->
            if (variant.name.toLowerCase().contains("debug")) {
                return
            }
            def bundleTask = project.tasks["bundle${variant.name.capitalize()}Aar"]
            artifacts {
                archives(bundleTask.archivePath) {
                    classifier variant.flavorName
                    builtBy bundleTask
                    name = project.name
                }
            }
        }
    }
}