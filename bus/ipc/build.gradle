/*
 * ************************************************************
 * 文件：build.gradle  模块：ipc  项目：ElegantBus
 * 当前修改时间：2020年06月17日 22:43:58
 * 上次修改时间：2020年06月17日 22:43:18
 * 作者：Cody.yi   https://github.com/codyer
 *
 * 描述：ipc
 * Copyright (c) 2020
 * ************************************************************
 */

apply plugin: 'com.android.library'

//编译groovy代码时采用 UTF-8
tasks.withType(GroovyCompile) {
    groovyOptions.encoding = "MacRoman"
}

//编译JAVA文件时采用UTF-8
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }

    defaultPublishConfig "aidlRelease"
    flavorDimensions('ipc')

    sourceSets {
        main {
            java.srcDirs = ['src/main', 'src/main/java', 'src/main/java/']
            aidl.srcDirs = ['src/main', 'src/main/aidl', 'src/main/aidl/']
        }
        aidl {
            java.srcDirs = ['src/aidl', 'src/aidl/java', 'src/aidl/java/']
            aidl.srcDirs = ['src/aidl', 'src/aidl/aidl', 'src/aidl/aidl/']
        }
        messenger {
            java.srcDirs = ['src/messenger', 'src/messenger/java', 'src/messenger/java/']
            aidl.srcDirs = ['src/messenger', 'src/messenger/aidl', 'src/messenger/aidl/']
        }
    }

    productFlavors {
        // 使用 aidl 实现
        aidl {
            dimension 'ipc'
        }
        // 使用 Messenger 实现
        messenger {
            dimension 'ipc'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    api project(':bus:core')
    implementation rootProject.ext.dependencies["fastjson"]
}

if (!isNoDoc) {//本地仓库不需要注释
    // 改变版本的时候先关闭文档输出编译成功，然后再打开编译文档输出，不然会依赖出错
//    apply from: "${project.rootDir}/config-variant-doc.gradle"
}

// 支持多变体打包
if (android.productFlavors.size() > 0) {
    android.libraryVariants.all { variant ->
        if (variant.name.toLowerCase().contains("debug")) {
            return
        }
//        println("\nbuild variant 99999999 = " + variant.name)
        // 生成 aar 文件
        def bundleTask = project.tasks["bundle${variant.name.capitalize()}Aar"]
        artifacts {
            archives(bundleTask.archivePath) {
                classifier variant.flavorName
                builtBy bundleTask
                name = project.name
            }
        }

        // 生成 source 文件
        def sourcesJarTask = project.tasks.create "sourcesJar${variant.name.capitalize()}", Jar
        variant.sourceSets.each {
            if (it.name == "main" || it.name == variant.flavorName) {
                sourcesJarTask.from it.java.sourceFiles
            }
        }

        artifacts {
            archives(sourcesJarTask.archivePath) {
                classifier variant.flavorName + "-sources"
                builtBy sourcesJarTask
                name = project.name
            }
        }

        // Javadoc
        def javadocTask = project.tasks.create "javadoc${variant.name.capitalize()}", Javadoc
        javadocTask.classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        javadocTask.classpath += variant.javaCompileProvider.get().classpath
        javadocTask.options.addStringOption('Xdoclint:none', '-quiet')
        javadocTask.options.addStringOption("locale", 'en_US')
        javadocTask.options.addStringOption("encoding", 'UTF-8')
        javadocTask.options.addStringOption("charSet", 'UTF-8')
        javadocTask.options.addStringOption("links", 'http://docs.oracle.com/javase/8/docs/api')
        javadocTask.failOnError false
        variant.sourceSets.each {
            if (it.name == "main" || it.name == variant.flavorName) {
                javadocTask.source += it.java.sourceFiles
            }
        }

        // aidl 路径
        javadocTask.source += "$buildDir/generated/aidl_source_output_dir/"

        def javadocJarTask = project.tasks.create "javadocJar${variant.name.capitalize()}", Jar

        javadocJarTask.dependsOn(javadocTask)
        javadocJarTask.from javadocTask.destinationDir

        artifacts {
            archives(javadocJarTask.archivePath) {
                classifier variant.flavorName + "-javadoc"
                builtBy javadocJarTask
                name = project.name
            }
        }
    }
}
if (isLocalMaven) {
    apply from: "${project.rootDir}/config-local-maven.gradle"
} else {
    apply plugin: 'com.github.dcendents.android-maven'
    group = 'com.github.codyer'
}