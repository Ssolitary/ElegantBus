/*
 * ************************************************************
 * 文件：config-local-aar-maven.gradle  模块：ElegantBus  项目：ElegantBus
 * 当前修改时间：2020年06月17日 21:57:19
 * 上次修改时间：2020年06月17日 19:40:40
 * 作者：Cody.yi   https://github.com/codyer
 *
 * 描述：ElegantBus
 * Copyright (c) 2020
 * ************************************************************
 */
apply plugin: 'maven'
def groupId = LOCAL_GROUP_ID + '.' + this.parent.getName()
// 包含变体的 aar 上传
uploadArchives() {
    repositories {
        mavenDeployer {
            repository(url: LOCAL_REPOSITORY)
            if (android.productFlavors.size() > 0) {
                android.libraryVariants.all { variant ->
                    if (variant.name.toLowerCase().contains("debug")) {
                        return
                    }
                    def isFlavor = !variant.flavorName.isEmpty()
                    def flavorName = "${variant.flavorName}"
                    // 生成多个pom
                    addFilter(flavorName) { artifact, file ->
                        true
                    }

                    // 生成 source 文件
                    def sourcesJarTask = project.tasks.create "sourcesJar${variant.name.capitalize()}", Jar
                    variant.sourceSets.each {
                        if (it.name == "main" || it.name == variant.flavorName)
                            sourcesJarTask.from it.java.sourceFiles
                    }

                    artifacts {
                        archives(sourcesJarTask.archivePath) {
                            classifier variant.flavorName + "-sources"
                            builtBy sourcesJarTask
                            name = project.name
                        }
                    }

                    pom(flavorName).groupId = groupId
                    pom(flavorName).artifactId = this.parent.getName() + '-' + this.getName() + "-" + flavorName
                    pom(flavorName).version = rootProject.ext.componentVersion // 版本号
                    pom(flavorName).packaging = 'aar'
                    // 自定义pom的依赖集
                    pom(flavorName).withXml {
                        def root = asNode()
                        def dependencyNodes = root["dependencies"][0] ?: root.appendNode("dependencies")
                        def addDep = {
                            if (it.group == null) return // Avoid empty dependency nodes
                            def dependencyNode = dependencyNodes.appendNode('dependency')
                            if (it.version == "unspecified") {
                                dependencyNode.appendNode('groupId', groupId)
                                dependencyNode.appendNode('artifactId', this.parent.getName() + '-' + it.name)
                                dependencyNode.appendNode('version', rootProject.ext.componentVersion)
                            } else {
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            }
                            if (it.hasProperty('optional') && it.optional) {
                                dependencyNode.appendNode('optional', 'true')
                            }
                        }
                        // 添加基本依赖
//                    configurations.api.allDependencies.each addDep
                        configurations.implementation.allDependencies.each addDep
                        // 添加特殊依赖
                        if (isFlavor) {
                            configurations["${flavorName}Implementation"].allDependencies.each addDep
                            configurations["${flavorName}Implementation"].allDependencies.each addDep
                            configurations["${flavorName}Api"].allDependencies.each addDep
                            configurations["${flavorName}Api"].allDependencies.each addDep
                        }
                    }
                }
            }
        }
    }
}
